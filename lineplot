#!/usr/bin/python
# !/home/software/Python-3.5.2/python

# =============================================================
#             configuration file for lineplot

# written by
#             B. Suerfu

# written on
#             2018.01.28

# for bugs and suggestions pleasr contact
#             suerfu64@gmail.com

# =============================================================

import sys

# ==================================================================




# check number of commandline arguments.
# usage is lineplot config-file datafile0 datafile1 ...
# minimum of 2 commandline arguments

if len(sys.argv)<2:
    print("usage: " + sys.argv[0] + " [config-file.cfg] data0 data1 ...")
    exit()

import ConfigParser as configparser
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc

# ==================================================================

# define function to get config parameter with default option.
# this function retrieves parameter from config file.
# in case not found, the specified default value is returned.

def ConfigGet( config, section, key, default=None):
    if config.has_option( section, key):
        return config.get( section, key);
    else:
        return default

# ==================================================================


# necessary for proper plotting

fig, ax = plt.subplots()
axes = [ax]

# ==================================================================

# read configuration file for plotting

config = configparser.ConfigParser()

section = []
    # section is equivalent to different directories.

# first check if cfg file is specified or not in the first argument.
if ".cfg" in sys.argv[1] :
    config.read( sys.argv[1] )
    section = config.sections()
else:
    print("No .cfg file found. Assuming default settings for all data files.")


# read global settings (title and font size) from config file.
title = ConfigGet( config, "global", "title")
fontsize = ConfigGet( config, "global", "fontsize")
ax.set_title( title, fontsize=fontsize)


# read and set settings for X-axis (x-label, unit, font size, linear vs log)
name = "axis-x0"
title = ConfigGet( config, name, "title")
unit = ConfigGet( config, name, "unit")
fontsize = ConfigGet( config, name, "fontsize")
xgrid = ConfigGet( config, name, "grid")

# if title is specified, use it, if not, use default title and unit.
# if logscale option is specified and can be retrieved via config, set logscale for x-axis.
# also turn on grids
if title:
    if unit:
        axes[0].set_xlabel( title + " ("+unit+")", fontsize=fontsize)
    else:
        axes[0].set_xlabel( title, fontsize=fontsize)
else:
    axes[0].set_xlabel( "X-Axis", fontsize=fontsize)

if config.has_option( name, "logscale"):
    axes[0].set_xscale('log')

if xgrid == "true" or xgrid == "on":
    axes[0].grid(True, which="major")
    axes[0].grid(True, which="minor")


# =======================================================================

# find out how many y-axis are going to be plotted
# first iterate over the y-axis and append all necessary axis.
# this is because when setting titles the axes need to be already appended.

for i in range(0,3):   # can plot up to 6 different scales
    name = 'axis-y%d' % i
    if name not in section:
        break
    elif i>0:
        axes.append( ax.twinx())
        found_y = True



for i in range(0,3):   # can plot up to 6 different scales
    name = 'axis-y%d' % i
    if name not in section:
        break
    else:
        title = ConfigGet( config,  name, "title")
        unit = ConfigGet( config,  name, "unit")
        color = ConfigGet( config,  name, "color")
        fontsize=ConfigGet( config,  name, "fontsize")
        ygrid = ConfigGet( config, name, "grid")

        if title:
            if unit:
                axes[i].set_ylabel( title + " ("+unit+")", fontsize=fontsize, color=color)
            else:
                axes[i].set_ylabel( title, fontsize=fontsize, color=color)
        else :
            ytitle = 'Y-Axis%d' % i
            axes[i].set_ylabel( ytitle, fontsize=fontsize, color=color)

        if config.has_option( name, "logscale"):
            axes[i].set_yscale('log')

        if ygrid == "true" or ygrid == "on":
            axes[i].grid(True, which="major")
            axes[i].grid(True, which="minor")

# ==================================================================


# variables to store lines and labels for later use with plotting legends
lg_lines = []
lg_labels = []


# curve-section iterate all curves listed in the config file, up to 100
csection = []

for k, element in enumerate(section):
    if 'curve' in element:
        csection.append( element)


# if no curve is specified use default curve names.
if len(csection) == 0:
    if ".cfg" in sys.argv[1] :
        for k in range(0, len(sys.argv)-2):
            csection.append( "curve%d"%k )
    else:
        for k in range(0, len(sys.argv)-1):
            csection.append( "curve%d"%k )


# number of curves is same as number of elements in curve-section as found by config or same as number of data file if curve is not specified.
ncurve = len(csection)


# ============================================================================

# cname means curve-name

for cname in csection:
    data_index = int( ConfigGet( config,  cname, "file", int(''.join(ele for ele in cname if ele.isdigit() ) ) ) ) + 2
        # index specifies which file's data to be plotted.
    if ".cfg" not in sys.argv[1]:
        data_index -= 1
    if data_index >= len(sys.argv):
        break
        # data_index cannot be larger than the maximum number of data files.

    # open the file in read mode and read data out
    f = open( sys.argv[data_index],'r' )
    lines = f.readlines()
    f.close()

    # retrieve columns to plot and prepare variable
    col_x = int( ConfigGet( config,  cname, "x", -1) )
    col_y = int( ConfigGet( config,  cname, "y", 1) )

    col_xerr = int( ConfigGet( config,  cname, "xerr", -1) )
    col_yerr = int( ConfigGet( config,  cname, "yerr", -1) )
        # by default will plot first column as x and second column as y

    max_index = max( col_x, col_y, col_xerr, col_yerr)

    x = []
    y = []

    xerr = []
    yerr = []
    x_prescale = float( ConfigGet( config,  cname, "x prescale", 1) )
    y_prescale = float( ConfigGet( config,  cname, "y prescale", 1) )

    # iterate over the file to plot
    for idx,line in enumerate(lines):
        if not line.startswith("#"):    # comment starts with '#'
            w = line.split()
            if len(w) > max_index:  # if number of column is shorter than max index, there is something wrong.

                if col_x is -1:
                    x.append( idx*x_prescale )

                elif w[col_x] == '-' or w[col_y] == '-':
                    continue

#                elif w[col_x] != '-':
                x.append( float(w[col_x]) * x_prescale )

#                if w[col_y]!= '-': # no-data is marked with '-'
                y.append( float(w[col_y]) * y_prescale )

                if col_xerr>=0 and w[col_xerr] != '-':
                    xerr.append( float(w[col_xerr]))

                if col_yerr>=0 and w[col_yerr] != '-':
                    yerr.append( float(w[col_yerr]))

    # retrieve auxiliary parameters for aesthetics and set default parameter for curves.
    linewidth = float( ConfigGet( config,  cname, "linewidth", 1) )
    color = ConfigGet( config,  cname, "color")
    style = ConfigGet( config,  cname, "style")
    y_ax = int(ConfigGet( config,  cname, "y-axis", 0))
        # by default use the first y-axis

    mksz = ConfigGet( config, cname, "marker size", 6)

    ecolor = ConfigGet( config, cname, "ecolor")
    elinewidth = ConfigGet( config, cname, "elinewidth")
    if elinewidth:
        elinewidth = int( elinewidth )

    if col_xerr<0:
        xerr = None
    if col_yerr<0:
        yerr = None

    ll = axes[y_ax].errorbar( x, y, xerr=xerr, yerr=yerr, ecolor=ecolor, elinewidth=elinewidth, color=color, linewidth=linewidth, fmt=style, markersize=mksz)

    # which axis to use
    lg_lines.append( ll)
    leg = ConfigGet( config,  cname, "legend", sys.argv[data_index])
    lg_labels.append( leg )

plt.minorticks_on()


# place additional axes.
if len(axes)==3:
    fig.canvas.draw()   # trigger ticks to be placed
    # fig.subplots_adjust(right=0.75)
    # find the right spacing between second y axis and third y axis.
    offset = 0.5 * axes[-2].yaxis.get_text_widths(fig.canvas.get_renderer())[1]
    offset += 1.4 * int(ConfigGet( config, "axis-y1","fontsize"))
    axes[-1].spines['right'].set_position(('outward', offset))
    axes[-1].set_frame_on(True)
    axes[-1].patch.set_visible(False)

# configure position of legends

loc = ConfigGet( config, "global","legend location", "best")
legsize = int(ConfigGet( config, "global", "legend size"))
plt.legend( lg_lines, lg_labels, loc=loc, fontsize=legsize)

# plot the curves

plt.tight_layout()
#plt.axes().set_aspect('equal', 'datalim')
plt.show()
